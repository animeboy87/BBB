{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPi2RZrr2AYcZjEaJW6orgD"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"RgBfna02JTR3","executionInfo":{"status":"ok","timestamp":1723710566301,"user_tz":-330,"elapsed":63912,"user":{"displayName":"Untold Sagas","userId":"09730275142114433166"}},"outputId":"18fbe4f1-0c1e-4da1-f5c0-1b1ed0aef23d"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/preprocessing/_encoders.py:975: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 53ms/step\n","Fold 1 - Accuracy: 0.9666666666666667\n","Confusion Matrix: \n","[[10  0  0]\n"," [ 0  8  1]\n"," [ 0  0 11]]\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 58ms/step\n","Fold 2 - Accuracy: 0.9666666666666667\n","Confusion Matrix: \n","[[13  0  0]\n"," [ 0 10  0]\n"," [ 0  1  6]]\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 48ms/step\n","Fold 3 - Accuracy: 0.9666666666666667\n","Confusion Matrix: \n","[[12  0  0]\n"," [ 0  9  1]\n"," [ 0  0  8]]\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 60ms/step\n","Fold 4 - Accuracy: 0.9666666666666667\n","Confusion Matrix: \n","[[ 8  0  0]\n"," [ 0  9  1]\n"," [ 0  0 12]]\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n","WARNING:tensorflow:5 out of the last 5 calls to <function TensorFlowTrainer.make_predict_function.<locals>.one_step_on_data_distributed at 0x7f639f05c040> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 95ms/step\n","Fold 5 - Accuracy: 1.0\n","Confusion Matrix: \n","[[ 7  0  0]\n"," [ 0 11  0]\n"," [ 0  0 12]]\n","\n","Average Accuracy: 0.9733333333333334\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Practical 5B\n","# Evaluating feed forward deep network for multiclass classification using KFold cross-validation\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.datasets import load_iris\n","from sklearn.model_selection import KFold\n","from sklearn.preprocessing import LabelEncoder, OneHotEncoder\n","from sklearn.metrics import accuracy_score, confusion_matrix\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense\n","iris = load_iris()\n","X = iris.data\n","y = iris.target\n","label_encoder=LabelEncoder()\n","integer_encoded = label_encoder.fit_transform(y)\n","onehot_encoder = OneHotEncoder(sparse=False)\n","integer_encoded = integer_encoded.reshape(len(integer_encoded), 1)\n","y_encoded = onehot_encoder.fit_transform(integer_encoded)\n","k_folds = 5\n","kf = KFold(n_splits=k_folds, shuffle=True, random_state=42)\n","def create_model():\n","  model = Sequential()\n","  model.add(Dense(10, input_dim=4, activation= 'relu'))\n","  model.add(Dense(8, activation='relu'))\n","  model.add(Dense(3, activation='softmax'))\n","  model.compile(loss = 'categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","  return model\n","fold = 0\n","accuracies = []\n","conf_matrices = []\n","for train_index, test_index in kf.split(X):\n","  fold += 1\n","  X_train, X_test = X[train_index], X[test_index]\n","  y_train, y_test = y_encoded[train_index], y_encoded[test_index]\n","  model = create_model()\n","  model.fit(X_train, y_train, epochs=100, batch_size=5, verbose=0)\n","  y_pred = model.predict(X_test)\n","  y_pred_classes = np.argmax(y_pred, axis=1)\n","  y_test_classes = np.argmax(y_test, axis=1)\n","  accuracy = accuracy_score(y_test_classes, y_pred_classes)\n","  accuracies.append(accuracy)\n","  conf_matrix = confusion_matrix(y_test_classes, y_pred_classes)\n","  conf_matrices.append(conf_matrix)\n","  print(f\"Fold {fold} - Accuracy: {accuracy}\")\n","  print(\"Confusion Matrix: \")\n","  print(conf_matrix)\n","  print()\n","avg_accuracy = np.mean(accuracies)\n","print(f'Average Accuracy: {avg_accuracy}')\n","plt.figure(figsize=(8, 6))\n","sns.boxplot(y=accuracies)\n","plt.title('Distribution of Accuracies Across Folds')\n","plt.xlabel('Accuracy')\n","plt.show()\n"]},{"cell_type":"code","source":[],"metadata":{"id":"_hbWUq8FJUJR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"KXOveVmFJUMI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"zoTDCipRJUPj"},"execution_count":null,"outputs":[]}]}